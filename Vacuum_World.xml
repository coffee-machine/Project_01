<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
//int grid[3][3] = {(0,0), (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), (2,1), (2,2)};
bool hasVisited[3][3];
int pos[3][3][4];
int Robot = 8;
int board[3][3];
int x = 0, y = 0, direction = 1;
int counter = 0;

void createBoard(){
    for (x = 0; x &lt; 3; x++){
        for (y = 0; y &lt; 3; y++){
            board[x][y] = 0;
        }
    }
    board[0][0] = Robot;
}

bool allGridsVisited(){
    int i, j;
    for(i = 0; i &lt; 3; i++) {
        for(j = 0; i &lt; 3; j++) {
            if(hasVisited[i][j] == true) {
                counter++;
            }
        }
    }

    if(counter &gt;= 9){
        return true;
    }

    return false;
}

void Do(int action) { //What action the Robot should do.
    if(action == 1) { //forward
        if(direction == 1) { //north
            if(y &lt; 2){
                y++;
            }
        }
        else if(direction == 2) { //east
            if(x &lt; 2){
                x++;
            }
        }
        else if(direction == 3) { //south
            if(y &gt; 0){
                y--;
            }
        }
        else if(direction == 4) { //west
            if(x &gt; 0){
                x--;
            }
        }
    }
    else if(action == 2) { //turn
        if(direction &lt; 4){
            direction++;
        }
        else
            direction = 0;
    }
    else if(action == 3) { //suck
        
    }
}

int Facing(int direction){ //What direction the Robot is facing.
    if(direction == 1) { //north, pos = 0
        return 1;
    }
    else if(direction == 2) { //east, pos = 1
        return 2;
    }
    else if(direction == 3) { //south, pos = 2
        return 3;
    } 
    else if(direction == 4) { //west, pos = 3
        return 4;
    }

    return 0;
}

bool Dirt(int x, int y) { //Where there is dirt at.
    return true;
}

void In(int x, int y) { //Where the Robot is at.
    Facing(direction);
    pos[0][0][direction] = Robot;
}

void old(int x, int y, int direction) {
    
}

void new(int x, int y, int direction) {
    
}

void next(int x, int y, int direcion) {
    
}

bool isLegal(int x, int y, int direction){
    if((x == 0) &amp;&amp; (x == y) || (y = x + 1) &amp;&amp; (direction == 1)){ //Direction is north
        return true;
    }
    else if(x == 0 &amp;&amp; y == 2 &amp;&amp; direction == 2){ //Direction is east
        return true;
    }
    return false;
}</declaration>
	<template>
		<name x="5" y="5">Template</name>
		<declaration>// Place local declarations here.</declaration>
		<location id="id0" x="-119" y="-186">
		</location>
		<location id="id1" x="340" y="-297" color="#ff0000">
			<name x="348" y="-331">ILLEGAL</name>
		</location>
		<location id="id2" x="-238" y="-297" color="#00ff00">
			<name x="-229" y="-323">LEGAL</name>
		</location>
		<location id="id3" x="68" y="85">
		</location>
		<location id="id4" x="-238" y="-84">
		</location>
		<location id="id5" x="229" y="-84">
		</location>
		<location id="id6" x="-17" y="-297">
		</location>
		<location id="id7" x="-17" y="-84" color="#ffc0cb">
			<name x="-8" y="-76">START</name>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id0"/>
			<target ref="id7"/>
			<label kind="assignment" x="-110" y="-144">Do(1)</label>
			<label kind="comments" x="-144" y="-161">Go Forward</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="guard" x="-161" y="9">!isLegal(x, y, 4)</label>
			<nail x="-289" y="-84"/>
			<nail x="-289" y="9"/>
			<nail x="340" y="9"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id5"/>
			<label kind="assignment" x="280" y="-178">Do(2)</label>
			<label kind="comments" x="280" y="-161">Turn</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id6"/>
			<label kind="assignment" x="255" y="-365">Do(2)</label>
			<label kind="comments" x="255" y="-382">Turn</label>
			<nail x="340" y="-339"/>
			<nail x="-17" y="-339"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="77" y="34">!isLegal(x, y, 3)</label>
			<nail x="68" y="9"/>
			<nail x="340" y="9"/>
			<nail x="340" y="-195"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="assignment" x="221" y="85">Do(2)</label>
			<label kind="comments" x="221" y="68">Turn</label>
			<nail x="382" y="-297"/>
			<nail x="382" y="85"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="-170" y="-254">!Dirt(x, y)</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="assignment" x="162" y="136">Do(2)</label>
			<label kind="comments" x="162" y="119">Turn</label>
			<nail x="433" y="-297"/>
			<nail x="433" y="136"/>
			<nail x="-238" y="136"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id2"/>
			<label kind="guard" x="-25" y="-390">isLegal(x, y, 2)</label>
			<nail x="229" y="-365"/>
			<nail x="-238" y="-365"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-170" y="187">isLegal(x, y, 3)</label>
			<nail x="68" y="179"/>
			<nail x="-331" y="179"/>
			<nail x="-331" y="-339"/>
			<nail x="-238" y="-339"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id1"/>
			<label kind="guard" x="238" y="-84">!isLegal(x, y, 2)</label>
			<nail x="340" y="-84"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id1"/>
			<label kind="guard" x="51" y="-297">!isLegal(x, y, 1)</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="-297" y="-203">isLegal(x, y, 4)</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="guard" x="-153" y="-322">isLegal(x, y, 1)</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id3"/>
			<label kind="guard" x="-8" y="-33">direction == 3</label>
			<label kind="comments" x="-119" y="-33">Facing South</label>
			<nail x="-17" y="85"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="guard" x="-178" y="-84">direction == 4</label>
			<label kind="comments" x="-170" y="-101">Facing West</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id5"/>
			<label kind="guard" x="60" y="-84">direction == 2</label>
			<label kind="comments" x="68" y="-110">Facing East</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="-8" y="-195">direction == 1</label>
			<label kind="comments" x="-8" y="-212">Facing North</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
Process = Template();
// List one or more processes to be composed into a system.
system Process;
    </system>
	<queries>
		<query>
			<formula>E&lt;&gt; (allGridsVisited == true &amp;&amp; pos[0][0][0] || pos[0][0][1] || pos[0][0][2] || pos[0][0][3])
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
