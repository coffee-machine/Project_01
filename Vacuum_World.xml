<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
bool hasVisited[3][3];
int pos[3][3][5];
int x = 0, y = 0, direction;
const int NORTH = 1, EAST = 2, SOUTH = 3, WEST = 4;
const int FORWARD = 1, TURN = 2, SUCK = 3;

//The initial pos of robot, should also be the final pos
//Only used by the query
bool initialPos(){
    if(x == 0 &amp;&amp; y == 0 &amp;&amp; direction == NORTH){
        return true;
    }
    return false;
}

//A boolean array for the query
bool allGridsVisited(){
    int i, j;
    for(i = 0; i &lt; 3; i++) {
        for(j = 0; j &lt; 3; j++) {
            if(hasVisited[i][j] != true) {
                return false;
            }
        }
    }
    return true;
}

void updatePos(int x, int y, int directionIn){
    direction = directionIn;
    hasVisited[x][y] = true;
}

void Do(int action) { //What action the Robot should do.
    if(action == FORWARD) { //forward
        pos[x][y][direction] = FORWARD;
        if(direction == NORTH) { //north
            if(y &lt; 2){
                y++;
                updatePos(x, y, NORTH);
            }
        }
        else if(direction == EAST) { //east
            if(x &lt; 2){
                x++;
                updatePos(x, y, EAST);
            }
        }
        else if(direction == SOUTH) { //south
            if(y &gt; 0){
                y--;
                updatePos(x, y, SOUTH);
            }
        }
        else if(direction == WEST) { //west
            if(x &gt; 0){
                x--;
                updatePos(x, y, WEST);
            }
        }
    }
    else if(action == TURN) { //turn
		pos[x][y][direction] = TURN;
        if(direction == NORTH){
            direction = EAST;
            updatePos(x, y, direction);
        }
		else if(direction == EAST) {
            direction = SOUTH;
            updatePos(x, y, direction);
        }
        else if(direction == SOUTH) {
            direction = WEST;
            updatePos(x, y, direction);
        }
        else if(direction == WEST){
            direction = NORTH;
            updatePos(x, y, direction);
        }        
    }
    else if(action == SUCK) { //suck
        
    }
}


void rules(int x, int y, int direction) {
    pos[0][0][NORTH] = FORWARD;
    //pos[0][1][NORTH] = FORWARD;
    //pos[0][2][NORTH] = TURN;
    //pos[0][2][EAST] = FORWARD;
}

void checkStrategy(int x, int y, int direction) {
    if(pos[x][y][direction] == FORWARD){
        Do(FORWARD);
    }
    else if(pos[x][y][direction] == TURN) {
        Do(TURN);
    }
    else {
        rules(x, y, direction);
    }
}

bool hasStrategy(int x, int y, int direction){
    if(pos[x][y][direction] == 0){ //Robot has no strategy for current grid.
        return false;
    }
    return true;
}

bool isLegal(int x, int y, int direction) {
    if(x == 0 &amp;&amp; y == 2 &amp;&amp; (direction == NORTH || direction == WEST)){
        return false;
	}
    else if(x == 2 &amp;&amp; y == 2 &amp;&amp; (direction == EAST || direction == NORTH)) {
        return false;
    }
    else if(x == 2 &amp;&amp; y == 0 &amp;&amp; (direction == SOUTH || direction == EAST)) {
        return false;
    }
    else if(x == 0 &amp;&amp; y == 0 &amp;&amp; (direction == WEST || direction == SOUTH)) {
        return false;
    }

    return true;
}</declaration>
	<template>
		<name x="5" y="5">Template</name>
		<declaration>// Place local declarations here.
int start(){
    x = 0;
    y = 0;
    //hasVisited[0][0] = true;
    direction = NORTH;
    rules(x, y, direction);
    return pos[x][y][direction]; // = Robot;
}

clock timer;
clock roundTime;</declaration>
		<location id="id0" x="-68" y="-144">
		</location>
		<location id="id1" x="-246" y="-229">
		</location>
		<location id="id2" x="85" y="-178" color="#ffc0cb">
			<name x="102" y="-187">START</name>
		</location>
		<location id="id3" x="272" y="-323" color="#ff0000">
			<name x="281" y="-348">ILLEGAL</name>
		</location>
		<location id="id4" x="-331" y="-323" color="#00ff00">
			<name x="-323" y="-348">LEGAL</name>
		</location>
		<location id="id5" x="-8" y="119">
			<name x="-25" y="136">south</name>
		</location>
		<location id="id6" x="-331" y="-85">
			<name x="-348" y="-119">west</name>
		</location>
		<location id="id7" x="187" y="-85">
			<name x="162" y="-68">east</name>
		</location>
		<location id="id8" x="-8" y="-323">
			<name x="-25" y="-357">north</name>
		</location>
		<location id="id9" x="-8" y="-85">
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="guard" x="-560" y="-43">hasStrategy(x, y, direction) == TURN &amp;&amp; timer == 1</label>
			<label kind="assignment" x="-560" y="-18">checkStrategy(x, y, direction)</label>
			<nail x="-331" y="-289"/>
			<nail x="-569" y="-289"/>
			<nail x="-569" y="-18"/>
			<nail x="-68" y="-17"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id9"/>
			<label kind="assignment" x="-85" y="-178">timer := 0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-221" y="-229">timer == 5</label>
			<label kind="assignment" x="-221" y="-246">Do(FORWARD)</label>
			<nail x="-238" y="-229"/>
			<nail x="-110" y="-229"/>
			<nail x="-110" y="-144"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id9"/>
			<label kind="assignment" x="51" y="-144">start()</label>
			<nail x="34" y="-127"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="guard" x="-527" y="26">hasStrategy(x, y, direction) == FORWARD &amp;&amp; timer == 5</label>
			<label kind="assignment" x="-527" y="51">checkStrategy(x, y, direction)</label>
			<nail x="-331" y="-161"/>
			<nail x="-535" y="-161"/>
			<nail x="-535" y="51"/>
			<nail x="-68" y="51"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="guard" x="-323" y="-272">hasStrategy(x, y, direction) == false</label>
			<nail x="-331" y="-229"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-221" y="-161">timer == 1</label>
			<label kind="assignment" x="-212" y="-144">Do(TURN)</label>
			<nail x="-246" y="-144"/>
			<nail x="-110" y="-144"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id3"/>
			<label kind="guard" x="-297" y="85">isLegal(x, y, WEST) == false</label>
			<nail x="-331" y="-42"/>
			<nail x="-331" y="85"/>
			<nail x="272" y="85"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="guard" x="76" y="127">isLegal(x, y, SOUTH) == false</label>
			<nail x="51" y="119"/>
			<nail x="391" y="119"/>
			<nail x="391" y="-374"/>
			<nail x="272" y="-374"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="68" y="-51">timer == 1</label>
			<label kind="assignment" x="76" y="-34">Do(TURN)</label>
			<nail x="348" y="-323"/>
			<nail x="348" y="-34"/>
			<nail x="187" y="-34"/>
			<nail x="34" y="-34"/>
			<nail x="-68" y="-34"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="guard" x="-68" y="-391">isLegal(x, y, EAST)</label>
			<nail x="187" y="-374"/>
			<nail x="-331" y="-374"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="-280" y="119">isLegal(x, y, SOUTH)</label>
			<nail x="-17" y="119"/>
			<nail x="-382" y="119"/>
			<nail x="-382" y="-374"/>
			<nail x="-331" y="-374"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id3"/>
			<label kind="guard" x="212" y="-85">isLegal(x, y, EAST) == false</label>
			<nail x="272" y="-85"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id3"/>
			<label kind="guard" x="34" y="-340">isLegal(x, y, NORTH) == false</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="guard" x="-510" y="-340">isLegal(x, y, WEST)</label>
			<nail x="-493" y="-85"/>
			<nail x="-493" y="-323"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id4"/>
			<label kind="guard" x="-246" y="-340">isLegal(x, y, NORTH) == true</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id5"/>
			<label kind="guard" x="0" y="34">direction == SOUTH</label>
			<nail x="-8" y="51"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id6"/>
			<label kind="guard" x="-229" y="-85">direction == WEST</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="guard" x="25" y="-85">direction == EAST</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="0" y="-238">direction == NORTH</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
Process = Template();
// List one or more processes to be composed into a system.
system Process;
    </system>
	<queries>
		<query>
			<formula>E&lt;&gt; (x == 0 &amp;&amp; y == 0 &amp;&amp; direction == NORTH)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (x == 0 &amp;&amp; y == 0 &amp;&amp; direction == NORTH) &amp;&amp; (hasVisited[0][0] == true &amp;&amp; hasVisited[0][1] == true &amp;&amp; hasVisited[0][2] == true &amp;&amp; hasVisited[1][0] == true &amp;&amp; hasVisited[1][1] == true &amp;&amp; hasVisited[1][2] == true &amp;&amp; hasVisited[2][0] == true &amp;&amp; hasVisited[2][1] == true &amp;&amp; hasVisited[2][2] == true)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (allGridsVisited() == true &amp;&amp; initialPos() == true)
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
